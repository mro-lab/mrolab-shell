# stdout に出力
function stdlog {
    echo "${@}"
}

# stderr に出力
function errlog {
    stdlog "${@}" 1>&2
}

# stderr に出力：強制終了
function dielog {
    errlog "${@}"
    exit 77
}

# 再帰的に文言検索
function rgrep {
    [ -n "${1:-}" ] && egrep "${1}" | rgrep "${@:2}" || tee
}

# 行番号を取得
function ngrep {
    egrep -n "${1}" | sed 's/:.*//g'
}

# ランダムな文字列を取得
function randstr {
    local charset="${1:-a-zA-Z0-9}"
    cat /dev/urandom | tr -dc "${charset}" | fold -w 4096 | head -n 1
}

# 単位展開
function expand_unit {
    local num_str=${1}
    case "${num_str: -1}" in
        [kK])   echo $((${num_str%?} * (1024**1)));;    # Kbyte
        [mM])   echo $((${num_str%?} * (1024**2)));;    # Mbyte
        [gG])   echo $((${num_str%?} * (1024**3)));;    # Gbyte
        [pP])   echo $((${num_str%?} * (1024**4)));;    # Pbyte
        *)      echo ${num_str} # そのまま
    esac
}

# 配列に sed を適用
function array_sed {
    local rule="${1:?ERROR: require rule.}"
    echo "${@:2}" | perl -pe 's/\s/\n/g' | sed "${rule}"
}

# 配列からランダムな要素を一つ取得
function array_rand {
    local max="${1:?ERROR: require pickup max.}"
    echo "${@:2}" | perl -pe 's/\s/\n/g' | shuf | head -n ${max}
}

# 環境変数を適用して cat
function ecat {
    local file_path="${1:?ERROR: require file path.}"
    local ignore_variables="${2:-}" # 無視したい変数名を指定
    local ignore_filter=""
    [ -n "${ignore_variables}" ] && ignore_filter=$(printf 's/(\$\{(%s)})/\\\\\\1/g' "${ignore_variables// /|}")
    source <({
        echo "cat - << EOF"     # ↓バッククォートがシェルの解釈時に悪さをするのでサニタイズ
        cat "${file_path}" | sed "s/\`/'/g" | perl -pe "${ignore_filter:-}"
        echo "EOF"
    })
}

# 数値を指定した基数で文字列化
function n2b {
    local base="${1:?ERROR: require base of number. (2|8|16|62)}"
    local num="${2:?ERROR: require number.}"
    local charset=($(echo {0..9} {A..Z} {a..z}))
    local idx
    {
        while
            idx=$((${num}%${base}))
            num=$((${num}/${base}))
            echo -n "${charset[@]:${idx}:1}"
        do [ "0" != "${num}" ] || break; done
    } | rev
    echo ''     # 改行で表示を整える
}

# 文字列を指定した基数で数値化
function b2n {
    local base="${1:?ERROR: require base of number. (2|8|16|62)}"
    local instr="${2:?ERROR: require string.}"
    local str=$(echo "${instr}" | rev)
    local charset=($(echo {0..9} {A..Z} {a..z}))
    local charmap key idx num num_base total=0
    declare -A charmap
    
    # 逆引き用の文字セットを作成
    for key in "${charset[@]}"; do
        charmap[${key}]="${#charmap[@]}"
    done
    
    # 基数計算
    for idx in $(seq 0 $(("${#str}"-1))); do
        num=${charmap[${str:${idx}:1}]} # 文字から数値を決定
        num_base=$((${base}**${idx}))   # 桁数に合わせて基数計算
        total=$((${total}+(${num}*${num_base})))
    done
    echo "${total}"
}

# オレオレ証明書作成
function create_cert {
    local domain="${1:?ERROR: require my domain. example.com}"
    local dist_name="${2:-/C=JP/ST=Tokyo/L=Nerima/O=none}"
    openssl genrsa -out "${domain}.key" 2048
    openssl req -new -key "${domain}.key" -out "${domain}.csr" -subj "${dist_name}/CN=${domain}" -addext "subjectAltName=DNS:${domain}"
    openssl x509 -req -days 3650 -extfile <(echo "subjectAltName=DNS:${domain}") -signkey "${domain}.key" -set_serial 1 -in "${domain}.csr" -out "${domain}.crt"
}
